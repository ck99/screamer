{"version":3,"sources":["binance/ExchangeInformation.ts","hooks/useBinanceSymbols.ts","hooks/useBinanceLiquidationsStream.ts","components/SymbolTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getExchangeInformation","axios","get","then","resp","data","useBinanceSymbols","useState","symbols","setSymbols","useEffect","ExchangeInformation","info","useBinanceLiquidationsStream","useWebSocket","onOpen","console","log","shouldReconnect","closeEvent","lastJsonMessage","readyState","getWebSocket","lastLiquidation","setLastLiquidation","o","symbol","s","side","S","orderType","timeInForce","f","originalQuantity","q","price","p","averagePrice","ap","orderStatus","X","lastFilledQuantity","l","accumulatedFillQuantity","z","time","T","SymbolTable","synth","Synth","toDestination","liquidationEvents","setLiquidationEvents","eventsMap","forEach","event","beepUp","beepDown","events","push","_","debounce","triggerAttackRelease","eventsForSymbol","length","Table","striped","bordered","hover","size","variant","sort","first","second","map","index","status","eventCount","App","Container","className","fluid","Jumbotron","Row","Col","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAUeA,EAPgB,WAC3B,OAAOC,IAAMC,IAAN,UAFK,2BAEL,0BACFC,MAAK,SAAAC,GACF,OAAOA,EAAKC,SCcTC,EAZW,WAAO,IAAD,EACEC,mBAA8B,IADhC,mBACrBC,EADqB,KACZC,EADY,KAS5B,OANAC,qBAAU,WACNC,IAAsBR,MAAK,SAAAS,GACvBH,EAAWG,EAAKJ,cAErB,IAEIA,G,iBCuCIK,EAvCsB,WACjC,IAD8G,EAM1GC,IALc,+CAKU,CACxBC,OAAQ,kBAAMC,QAAQC,IAAI,WAE1BC,gBAAiB,SAACC,GAAD,OAAgB,KANjCC,EAH0G,EAG1GA,gBACAC,EAJ0G,EAI1GA,WAJ0G,KAK1GC,aAM0Cf,sBAXgE,mBAWvGgB,EAXuG,KAWtFC,EAXsF,KAoC9G,OAvBAd,qBAAU,WACN,GAAGU,EAAiB,CAAC,IAAD,EAaZA,EAAgBK,EAXbC,EAFS,EAEZC,EACGC,EAHS,EAGZC,EACGC,EAJS,EAIZL,EACGM,EALS,EAKZC,EACGC,EANS,EAMZC,EACGC,EAPS,EAOZC,EACIC,EARQ,EAQZC,GACGC,EATS,EASZC,EACGC,EAVS,EAUZC,EACGC,EAXS,EAWZC,EACGC,EAZS,EAYZC,EAIJtB,EAAmB,CACfE,SAAQE,OAAMW,cAAaT,YAAWe,OAAMd,cAAaE,mBACzDE,QAAOQ,0BAAwBN,eAAcI,0BAGtD,CAACrB,IACG,CAACC,EAAYE,I,wCCkCTwB,EAzEK,WAChB,IAAMC,GAAQ,IAAIC,KAAQC,gBACpB1C,EAAUF,IAFM,EAGeO,IAHf,mBAGJU,GAHI,aAI4BhB,mBAA8B,IAJ1D,mBAIf4C,EAJe,KAIIC,EAJJ,KAetB1C,qBAAU,WACN,GAAGF,EAAS,CACR,IAAM6C,EAAY,GAClB7C,EAAQ8C,SAAQ,YAAe,IAAb5B,EAAY,EAAZA,OACd2B,EAAU3B,GAAU,MAGxB0B,EAAqBC,MAE1B,CAAC7C,IAEJE,qBAAU,WApBqB,IAAC6C,EAqBzBhC,IApBe,SADUgC,EAsBDhC,GArBlBK,KAAkB4B,IAAgBC,IAC3CzC,QAAQC,IAAIsC,GACZH,GAAqB,SAACM,GAElB,OADAA,EAAOH,EAAM7B,QAAQiC,KAAKJ,GACnBG,QAmBZ,CAACnC,IAEJ,IAAMiC,EAASI,IAAEC,UAAS,WACtBb,EAAMc,qBAAqB,KAAM,OAClC,KACGL,EAAWG,IAAEC,UAAS,WACxBb,EAAMc,qBAAqB,KAAM,OAClC,KACGC,EAAkB,SAACrC,GAAD,OAAqByB,EAAkBzB,IAAWyB,EAAkBzB,GAAQsC,OAAS,EAAKb,EAAkBzB,GAAQsC,OAAS,GACtJ,OACI,eAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,KAAKC,QAAS,OAAjD,UACI,gCACA,+BACI,wCACA,wCACA,mDAGJ,gCAGI9D,EACK+D,MAAK,SAACC,EAA0BC,GAC7B,OAAOV,EAAgBU,EAAO/C,QAAUqC,EAAgBS,EAAM9C,WAEjEgD,KAAI,WAAmBC,GAAW,IAA5BjD,EAA2B,EAA3BA,OAAQkD,EAAmB,EAAnBA,OAETC,EAAc1B,EAAkBzB,IAAWyB,EAAkBzB,GAAQsC,OAAS,EAAKb,EAAkBzB,GAAQsC,OAAS,EAE5H,OACI,+BACI,6BAAKtC,IACL,6BAAKkD,IACL,6BAAKC,MAHAF,YChDjBG,MAbf,WACE,OACI,eAACC,EAAA,EAAD,CAAWC,UAAU,MAAMC,OAAK,EAAhC,UACE,cAACC,EAAA,EAAD,UACE,oBAAIF,UAAU,SAAd,iCAEA,cAACG,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UAAK,cAAC,EAAD,YCNJC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBpF,MAAK,YAAkD,IAA/CqF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ac2c43a4.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseURI = 'https://fapi.binance.com';\nconst getExchangeInformation = () => {\n    return axios.get(`${baseURI}/fapi/v1/exchangeInfo`)\n        .then(resp => {\n            return resp.data;\n        })\n}\n\nexport default getExchangeInformation;","import {useState, useEffect} from \"react\";\nimport ExchangeInformation from \"../binance/ExchangeInformation\";\n\nexport type SymbolInformation = {\n    status: string;\n    symbol: string;\n}\n\nconst useBinanceSymbols = () => {\n    const [symbols, setSymbols] = useState<SymbolInformation[]>([]);\n\n    useEffect(() => {\n        ExchangeInformation().then(info => {\n            setSymbols(info.symbols);\n        })\n    }, [])\n\n    return symbols;\n};\n\nexport default useBinanceSymbols;","import {useEffect, useState} from \"react\";\nimport useWebSocket, {ReadyState} from 'react-use-websocket';\n\nexport type LiquidationEvent = {\n    symbol: string;\n    side: string;\n    orderType: string;\n    timeInForce: string;\n    originalQuantity: string;\n    price: string;\n    averagePrice: string;\n    orderStatus: string;\n    lastFilledQuantity: string;\n    accumulatedFillQuantity: string;\n    time: number;\n}\n\nconst useBinanceLiquidationsStream = (): [readyState: ReadyState, lastLiquidation: LiquidationEvent|undefined] => {\n    const socketUrl = 'wss://fstream.binance.com/ws/!forceOrder@arr';\n    const {\n        lastJsonMessage,\n        readyState,\n        getWebSocket\n    } = useWebSocket(socketUrl, {\n        onOpen: () => console.log('opened'),\n        //Will attempt to reconnect on all close events, such as server shutting down\n        shouldReconnect: (closeEvent) => true,\n    });\n    const [lastLiquidation, setLastLiquidation] = useState<LiquidationEvent>();\n\n    useEffect(() => {\n        if(lastJsonMessage) {\n            const {\n                s: symbol,\n                S: side,\n                o: orderType,\n                f: timeInForce,\n                q: originalQuantity,\n                p: price,\n                ap: averagePrice,\n                X: orderStatus,\n                l: lastFilledQuantity,\n                z: accumulatedFillQuantity,\n                T: time,\n            } = lastJsonMessage.o;\n\n\n            setLastLiquidation({\n                symbol, side, orderStatus, orderType, time, timeInForce, originalQuantity,\n                price, accumulatedFillQuantity,averagePrice, lastFilledQuantity\n            })\n        }\n    }, [lastJsonMessage])\n    return [readyState, lastLiquidation];\n};\n\nexport default useBinanceLiquidationsStream;\n","import React, {useState, useEffect} from \"react\";\nimport useBinanceSymbols, {SymbolInformation} from \"../hooks/useBinanceSymbols\";\nimport useBinanceLiquidationsStream, {LiquidationEvent} from \"../hooks/useBinanceLiquidationsStream\";\nimport _ from 'lodash';\nimport Table from 'react-bootstrap/Table'\nimport {Synth} from \"tone\";\n\n\ninterface IDictionary<TValue> {\n    [id: string]: TValue;\n}\n\ntype LiquidationEventMap = IDictionary<LiquidationEvent[]>;\n\nconst SymbolTable = () => {\n    const synth = new Synth().toDestination();\n    const symbols = useBinanceSymbols();\n    const [connected, lastLiquidation] = useBinanceLiquidationsStream();\n    const [liquidationEvents, setLiquidationEvents] = useState<LiquidationEventMap>({});\n\n    const insertLiquidationEvent = (event: LiquidationEvent) => {\n        if(event.side === \"BUY\") { beepUp()} else {beepDown()}\n        console.log(event);\n        setLiquidationEvents((events: LiquidationEventMap) => {\n            events[event.symbol].push(event);\n            return events;\n        })\n    }\n\n    useEffect(() => {\n        if(symbols) {\n            const eventsMap = {} as LiquidationEventMap;\n            symbols.forEach(({symbol}) => {\n                eventsMap[symbol] = [];\n            })\n\n            setLiquidationEvents(eventsMap);\n        }\n    }, [symbols])\n\n    useEffect(() => {\n        if(lastLiquidation) {\n            insertLiquidationEvent(lastLiquidation);\n        }\n    }, [lastLiquidation])\n\n    const beepUp = _.debounce(() => {\n        synth.triggerAttackRelease(\"C5\", 0.05);\n    }, 0.05);\n    const beepDown = _.debounce(() => {\n        synth.triggerAttackRelease(\"C4\", 0.05);\n    }, 0.05);\n    const eventsForSymbol = (symbol: string) => (liquidationEvents[symbol] && liquidationEvents[symbol].length > 0) ? liquidationEvents[symbol].length : 0;\n   return (\n       <Table striped bordered hover size=\"sm\" variant={\"dark\"}>\n           <thead>\n           <tr>\n               <th>Symbol</th>\n               <th>Status</th>\n               <th>Liquidations</th>\n           </tr>\n           </thead>\n           <tbody>\n           {\n\n               symbols\n                   .sort((first: SymbolInformation, second: SymbolInformation) => {\n                       return eventsForSymbol(second.symbol) - eventsForSymbol(first.symbol);\n                   })\n                   .map(({symbol, status}, index) => {\n\n                   const eventCount = (liquidationEvents[symbol] && liquidationEvents[symbol].length > 0) ? liquidationEvents[symbol].length : 0;\n\n                   return (\n                       <tr key={index}>\n                           <td>{symbol}</td>\n                           <td>{status}</td>\n                           <td>{eventCount}</td>\n                       </tr>\n                   )\n               })\n           }\n           </tbody>\n       </Table>\n   )\n}\n\nexport default SymbolTable;","import React, {useEffect} from 'react';\n\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport SymbolTable from \"./components/SymbolTable\";\n\nfunction App() {\n  return (\n      <Container className=\"p-3\" fluid>\n        <Jumbotron>\n          <h1 className=\"header\">Binance Bloodbath</h1>\n        </Jumbotron>\n          <Row>\n              <Col><SymbolTable/></Col>\n          </Row>\n      </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}